service: lost-creatives-api

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-east-1

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createCategory:
    handler: create-category.main
    events:
      - http:
          path: categories
          method: post
          cors: true
          authorizer: aws_iam

  getCategory:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get-category.main
    events:
      - http:
          path: categories/{id}
          method: get
          cors: true

  listCategories:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list-categories.main
    events:
      - http:
          path: categories
          method: get
          cors: true

  updateCategory:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update-category.main
    events:
      - http:
          path: categories/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete-category.main
    events:
      - http:
          path: categories/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  createImage:
    handler: create-image.main
    events:
      - http:
          path: images
          method: post
          cors: true
          authorizer: aws_iam

  createBlog:
    handler: create-blog.main
    events:
      - http:
          path: blogs
          method: post
          cors: true
          authorizer: aws_iam

  listBlogs:
    handler: list-blogs.main
    events:
      - http:
          path: blogs
          method: get
          cors: true

  getBlog:
    handler: get-blog.main
    events:
      - http:
          path: blogs/{id}
          method: get
          cors: true

  listBlogImages:
    handler: list-blog-images.main
    events:
      - http:
          path: images/{blogId}
          method: get
          cors: true
